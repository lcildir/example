"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.SlackEvents = exports.SlackMessage = exports.SlackConnector = exports.SlackEventType = void 0;
var reshuffle_base_connector_1 = require("reshuffle-base-connector");
var SlackMessage_1 = __importDefault(require("./SlackMessage"));
exports.SlackMessage = SlackMessage_1["default"];
var web_api_1 = require("@slack/web-api");
var bolt_1 = require("@slack/bolt");
var SlackEvents_1 = require("./SlackEvents");
exports.SlackEvents = SlackEvents_1.SlackEvents;
var SlackEventType;
(function (SlackEventType) {
    SlackEventType["MESSAGE"] = "message";
    SlackEventType["COMMAND"] = "command";
    SlackEventType["EVENT"] = "event";
    SlackEventType["ACTION"] = "action";
})(SlackEventType = exports.SlackEventType || (exports.SlackEventType = {}));
var SlackConnector = /** @class */ (function (_super) {
    __extends(SlackConnector, _super);
    function SlackConnector(app, options, id) {
        var _this = this;
        options.port = options.port || 3000;
        _this = _super.call(this, app, options, id) || this;
        _this.webClient = new web_api_1.WebClient(options.token);
        _this.receiver = new bolt_1.ExpressReceiver({
            signingSecret: options.signingSecret,
            endpoints: options.endpoints || '/'
        });
        _this.slackApp = new bolt_1.App({
            token: options.token,
            receiver: _this.receiver
        });
        return _this;
    }
    SlackConnector.prototype.onStart = function () {
        var _this = this;
        var _a;
        this.slackApp.start((_a = this.configOptions) === null || _a === void 0 ? void 0 : _a.port).then(function () {
            var _a;
            _this.app
                .getLogger()
                .info("Slack Connector - Slack app running on port " + ((_a = _this.configOptions) === null || _a === void 0 ? void 0 : _a.port));
            _this.setupEventEmitters();
        });
    };
    SlackConnector.prototype.onStop = function () {
        this.slackApp.stop();
    };
    SlackConnector.prototype.setupEventEmitters = function () {
        var _this = this;
        Object.values(this.eventConfigurations).forEach(function (event) {
            var options = event.options;
            switch (options.type) {
                case SlackEventType.EVENT: {
                    var eventType = options.values.type;
                    _this.slackApp.event(eventType, function (slackEvent) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.app.handleEvent(event.id, __assign(__assign({}, event), slackEvent))];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    break;
                }
            }
        });
    };
    SlackConnector.prototype.on = function (options, handler, eventId) {
        if (!eventId) {
            eventId = "Slack/" + options.type + "/" + this.id;
        }
        var event = new reshuffle_base_connector_1.EventConfiguration(eventId, this, options);
        this.eventConfigurations[event.id] = event;
        this.app.when(event, handler);
        return event;
    };
    SlackConnector.prototype.postMessage = function (channel, message) {
        return __awaiter(this, void 0, void 0, function () {
            var msg, m, rv, payload, response, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof message === 'string' || message instanceof SlackMessage_1["default"]) {
                            msg = message;
                        }
                        else if (Array.isArray(message)) {
                            msg = new SlackMessage_1["default"](message);
                        }
                        else if (typeof message === 'function') {
                            m = new SlackMessage_1["default"]();
                            rv = message(m);
                            msg = rv === undefined ? m : String(rv);
                        }
                        else {
                            throw new Error("Invalid message: " + message);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        payload = typeof msg === 'string'
                            ? { text: msg, link_names: true }
                            : { text: '', blocks: msg.getBlocks() };
                        return [4 /*yield*/, this.webClient.chat.postMessage(__assign({ channel: channel }, payload))];
                    case 2:
                        response = _a.sent();
                        this.app
                            .getLogger()
                            .info("Slack Connector - Successfully send message " + response.ts + " in channel " + channel);
                        return [2 /*return*/, response];
                    case 3:
                        err_1 = _a.sent();
                        this.app.getLogger().error("Slack Connector - postMessage error to channel " + channel + ": " + err_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SlackConnector.prototype.updateMessage = function (channelId, text, timestamp, msgOptions) {
        var _a;
        return this.slackApp.client.chat.update(__assign({ token: (_a = this.configOptions) === null || _a === void 0 ? void 0 : _a.token, ts: timestamp, channel: channelId, text: text }, msgOptions));
    };
    SlackConnector.prototype.deleteMessage = function (channelId, timestamp) {
        return this.webClient.chat["delete"]({
            ts: timestamp,
            channel: channelId
        });
    };
    SlackConnector.prototype.scheduleMessage = function (channel, postAt, text, msgOptions) {
        var toUnix = postAt.getTime() / 1000;
        return this.webClient.chat.scheduleMessage(__assign({ post_at: toUnix.toString(), channel: channel,
            text: text }, msgOptions));
    };
    SlackConnector.prototype.searchMessages = function (query) {
        var _a;
        return this.slackApp.client.search.messages({
            token: (_a = this.configOptions) === null || _a === void 0 ? void 0 : _a.token,
            query: query,
            sort: 'score',
            sort_dir: 'asc'
        });
    };
    SlackConnector.prototype.getWebClient = function () {
        return this.webClient;
    };
    SlackConnector.prototype.getSlackApp = function () {
        return this.slackApp;
    };
    SlackConnector.prototype.sdk = function () {
        return {
            slackApp: this.getSlackApp(),
            webClient: this.getWebClient()
        };
    };
    return SlackConnector;
}(reshuffle_base_connector_1.BaseConnector));
exports.SlackConnector = SlackConnector;
exports["default"] = SlackConnector;
//# sourceMappingURL=index.js.map