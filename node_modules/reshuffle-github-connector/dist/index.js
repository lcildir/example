"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.GitHubConnector = void 0;
var reshuffle_base_connector_1 = require("reshuffle-base-connector");
var rest_1 = require("@octokit/rest");
var webhooks_1 = require("@octokit/webhooks");
var DEFAULT_WEBHOOK_PATH = '/reshuffle-github-connector/webhook';
function validateBaseURL(url) {
    if (typeof url !== 'string') {
        throw new Error("Invalid url: " + url);
    }
    var match = url.match(/^(https:\/\/[\w-]+(\.[\w-]+)*(:\d{1,5})?)\/?$/);
    if (!match) {
        throw new Error("Invalid url: " + url);
    }
    return match[1];
}
var GitHubConnector = /** @class */ (function (_super) {
    __extends(GitHubConnector, _super);
    function GitHubConnector(app, options, id) {
        var _this = _super.call(this, app, options, id) || this;
        _this._sdk = new rest_1.Octokit({
            auth: (options === null || options === void 0 ? void 0 : options.token) && "token " + options.token
        });
        return _this;
    }
    GitHubConnector.prototype.onStart = function () {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var logger, events, baseUrl, githubEvents, _loop_1, this_1, _i, _c, _d, key, events_1;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        logger = this.app.getLogger();
                        events = Object.values(this.eventConfigurations);
                        if (!events.length) return [3 /*break*/, 4];
                        baseUrl = validateBaseURL((_a = this.configOptions) === null || _a === void 0 ? void 0 : _a.runtimeBaseUrl);
                        githubEvents = events.reduce(function (acc, _a) {
                            var _b;
                            var _c = _a.options, owner = _c.owner, repo = _c.repo, githubEvent = _c.githubEvent;
                            var repoEvents = acc[owner + "/" + repo] || [];
                            return __assign(__assign({}, acc), (_b = {}, _b[owner + "/" + repo] = __spreadArrays(repoEvents, [githubEvent]), _b));
                        }, {});
                        _loop_1 = function (key, events_1) {
                            var _a, owner, repo, webhookOptions, webhooks, existingWebhook, webhook;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _a = key.split('/'), owner = _a[0], repo = _a[1];
                                        webhookOptions = {
                                            events: events_1,
                                            repo: repo,
                                            config: {
                                                url: baseUrl + (((_b = this_1.configOptions) === null || _b === void 0 ? void 0 : _b.webhookPath) || DEFAULT_WEBHOOK_PATH),
                                                secret: this_1.configOptions.secret,
                                                insecure_ssl: '0',
                                                content_type: 'json'
                                            },
                                            owner: owner
                                        };
                                        return [4 /*yield*/, this_1._sdk.repos.listWebhooks({
                                                owner: owner,
                                                repo: repo
                                            })];
                                    case 1:
                                        webhooks = _b.sent();
                                        existingWebhook = webhooks.data.find(function (_a) {
                                            var existingEvents = _a.events, existingConfig = _a.config;
                                            if (existingConfig.url === webhookOptions.config.url &&
                                                existingConfig.content_type === webhookOptions.config.content_type &&
                                                existingConfig.insecure_ssl === webhookOptions.config.insecure_ssl) {
                                                var eventsNotRegistered = events_1 === null || events_1 === void 0 ? void 0 : events_1.filter(function (ev) { return !existingEvents.includes(ev); });
                                                return (eventsNotRegistered === null || eventsNotRegistered === void 0 ? void 0 : eventsNotRegistered.length) === 0;
                                            }
                                            return false;
                                        });
                                        if (!existingWebhook) return [3 /*break*/, 2];
                                        logger.info("Reshuffle GitHub - existing webhook reused (name: " + existingWebhook.name + ", url: " + existingWebhook.url + ")");
                                        return [3 /*break*/, 4];
                                    case 2: return [4 /*yield*/, this_1._sdk.repos.createWebhook(webhookOptions)];
                                    case 3:
                                        webhook = (_b.sent()).data;
                                        logger.info("Reshuffle GitHub - webhook registered successfully (name: " + webhook.name + ", url: " + webhook.url + ")");
                                        _b.label = 4;
                                    case 4: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _i = 0, _c = Object.entries(githubEvents);
                        _e.label = 1;
                    case 1:
                        if (!(_i < _c.length)) return [3 /*break*/, 4];
                        _d = _c[_i], key = _d[0], events_1 = _d[1];
                        return [5 /*yield**/, _loop_1(key, events_1)];
                    case 2:
                        _e.sent();
                        _e.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // Your events
    GitHubConnector.prototype.on = function (options, handler, eventId) {
        var _a;
        options.githubEvent = options.githubEvent || 'push';
        var path = ((_a = this.configOptions) === null || _a === void 0 ? void 0 : _a.webhookPath) || DEFAULT_WEBHOOK_PATH;
        if (!eventId) {
            eventId = "Github" + path + "/" + options.githubEvent + "/" + this.id;
        }
        var event = new reshuffle_base_connector_1.EventConfiguration(eventId, this, options);
        this.eventConfigurations[event.id] = event;
        this.app.when(event, handler);
        this.app.registerHTTPDelegate(path, this);
        return event;
    };
    GitHubConnector.prototype.handle = function (req, res) {
        return __awaiter(this, void 0, void 0, function () {
            var incomingGithubEvent, githubRepo, githubOwner, logger, signature, matchesSignature, eventsUsingGithubEvent, _i, eventsUsingGithubEvent_1, event;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        incomingGithubEvent = req.headers['x-github-event'];
                        githubRepo = req.body.repository.name;
                        githubOwner = req.body.repository.owner.login;
                        logger = this.app.getLogger();
                        if (this.configOptions.secret) {
                            signature = (req.headers['x-hub-signature-256'] ||
                                req.headers['x-hub-signature']);
                            matchesSignature = webhooks_1.verify(this.configOptions.secret, req.body, signature);
                            if (!matchesSignature) {
                                logger.error("Reshuffle GitHub - webhook secret doesn't match");
                                return [2 /*return*/, false];
                            }
                        }
                        eventsUsingGithubEvent = Object.values(this.eventConfigurations).filter(function (event) {
                            var _a = event.options, repo = _a.repo, owner = _a.owner, githubEvent = _a.githubEvent;
                            return repo === githubRepo && owner === githubOwner && githubEvent === incomingGithubEvent;
                        });
                        _i = 0, eventsUsingGithubEvent_1 = eventsUsingGithubEvent;
                        _a.label = 1;
                    case 1:
                        if (!(_i < eventsUsingGithubEvent_1.length)) return [3 /*break*/, 4];
                        event = eventsUsingGithubEvent_1[_i];
                        return [4 /*yield*/, this.app.handleEvent(event.id, __assign(__assign({}, event), req.body))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        res.send();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    GitHubConnector.prototype.sdk = function () {
        return this._sdk;
    };
    return GitHubConnector;
}(reshuffle_base_connector_1.BaseHttpConnector));
exports.GitHubConnector = GitHubConnector;
exports["default"] = GitHubConnector;
//# sourceMappingURL=index.js.map